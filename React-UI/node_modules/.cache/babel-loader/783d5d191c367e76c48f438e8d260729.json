{"ast":null,"code":"var _jsxFileName = \"/var/www/html/proto/prototype/React-UI/src/Components/App/Stats/Stats.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/style-prop-object */\n\n/* eslint-disable jsx-a11y/alt-text */\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\n/* eslint-disable */\nimport React, { useState, useEffect } from \"react\";\nimport { withTranslation } from \"react-i18next\"; // import { Chart } from \"react-google-charts\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Stats.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = {\n  Extras: \"blue\",\n  Speed: \"red\",\n  Program: \"yellow\",\n  Temp: \"pink\"\n};\nexport function Stats(props) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState(0);\n  const [options, setOptions] = useState({\n    backgroundColor: \"#aaaaaa\",\n    title: \"Program wise Stats\",\n    titleTextStyle: {\n      color: \"red\"\n    },\n    is3D: true,\n    chartArea: {\n      left: \"3%\",\n      top: \"3%\",\n      height: \"65%\",\n      width: \"65%\"\n    },\n    fontSize: 16,\n    bold: true,\n    legend: {\n      position: \"right\",\n      textStyle: {\n        color: \"white\",\n        fontSize: 16,\n        bold: true\n      }\n    }\n  });\n  useEffect(() => {\n    // Update the document title using the browser API\n    let total = 0;\n    console.log(props.stats);\n    let data = [...props.stats];\n    let Max = 0;\n\n    for (let i = 0; i < data.length; i++) {\n      total += parseInt(data[i][1]);\n      data[i][2] = data[i][1];\n      if (Max < parseInt(data[i][1])) Max = parseInt(data[i][1]);\n    }\n\n    setMax(Max);\n    console.log(max);\n\n    for (let i = 0; i < data.length; i++) {\n      console.log(data[i][1]);\n      data[i][1] = Math.round(data[i][1] / total * 100);\n    }\n\n    setData(data);\n    setOptions({\n      titleTextStyle: {\n        color: \"#FFFFFF\",\n        italic: true,\n        fontSize: 24\n      },\n      backgroundColor: \"#aaaaaa\",\n      lable: props.temparature ? \"Temp\" : props.speed ? \"Speed\" : props.extras ? \"Extras\" : \"Program\",\n      title: props.temparature ? \"Temparature\" : props.speed ? \"Speed\" : props.extras ? \"Extras\" : \"Programme\"\n    });\n  }, [props.stats]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"statsTitle\",\n        children: options.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-columns text-white\",\n      children: data.map((card, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card mt-1 mb-1 ${max === card[2] ? colors[options.lable] : \"brown\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: t(card[0])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"percnetage\",\n              children: [card[1], \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Stats, \"adYsO8oYPI5i+955PyKbVNJocbc=\");\n\n_c = Stats;\nexport default withTranslation([\"translation\"])(Stats);\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"sources":["/var/www/html/proto/prototype/React-UI/src/Components/App/Stats/Stats.js"],"names":["React","useState","useEffect","withTranslation","colors","Extras","Speed","Program","Temp","Stats","props","data","setData","max","setMax","options","setOptions","backgroundColor","title","titleTextStyle","color","is3D","chartArea","left","top","height","width","fontSize","bold","legend","position","textStyle","total","console","log","stats","Max","i","length","parseInt","Math","round","italic","lable","temparature","speed","extras","map","card","index","t"],"mappings":"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","sourcesContent":["/* eslint-disable react/style-prop-object */\n/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable */\nimport React, { useState, useEffect } from \"react\";\nimport { withTranslation } from \"react-i18next\";\n// import { Chart } from \"react-google-charts\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Stats.css\";\n\nconst colors = {\n  Extras: \"blue\",\n  Speed: \"red\",\n  Program: \"yellow\",\n  Temp: \"pink\",\n};\nexport function Stats(props) {\n  const [data, setData] = useState([]);\n  const [max, setMax] = useState(0);\n  const [options, setOptions] = useState({\n    backgroundColor: \"#aaaaaa\",\n    title: \"Program wise Stats\",\n    titleTextStyle: { color: \"red\" },\n    is3D: true,\n    chartArea: {\n      left: \"3%\",\n      top: \"3%\",\n      height: \"65%\",\n      width: \"65%\",\n    },\n    fontSize: 16,\n    bold: true,\n    legend: {\n      position: \"right\",\n      textStyle: { color: \"white\", fontSize: 16, bold: true },\n    },\n  });\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    let total = 0;\n    console.log(props.stats);\n    let data = [...props.stats];\n    let Max = 0;\n    for (let i = 0; i < data.length; i++) {\n      total += parseInt(data[i][1]);\n      data[i][2] = data[i][1];\n      if (Max < parseInt(data[i][1])) Max = parseInt(data[i][1]);\n    }\n\n    setMax(Max);\n\n    console.log(max);\n\n    for (let i = 0; i < data.length; i++) {\n      console.log(data[i][1]);\n      data[i][1] = Math.round((data[i][1] / total) * 100);\n    }\n\n    setData(data);\n\n    setOptions({\n      titleTextStyle: { color: \"#FFFFFF\", italic: true, fontSize: 24 },\n      backgroundColor: \"#aaaaaa\",\n\n      lable: props.temparature\n        ? \"Temp\"\n        : props.speed\n        ? \"Speed\"\n        : props.extras\n        ? \"Extras\"\n        : \"Program\",\n      title: props.temparature\n        ? \"Temparature\"\n        : props.speed\n        ? \"Speed\"\n        : props.extras\n        ? \"Extras\"\n        : \"Programme\",\n    });\n  }, [props.stats]);\n\n  return (\n    <>\n      <div>\n        <h2 className=\"statsTitle\">{options.title}</h2>\n      </div>\n      <div className=\"card-columns text-white\">\n        {data.map((card, index) => {\n          return (\n            <div\n              className={`card mt-1 mb-1 ${\n                max === card[2] ? colors[options.lable] : \"brown\"\n              }`}\n            >\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{t(card[0])}</h5>\n                <p className=\"percnetage\">{card[1]}%</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default withTranslation([\"translation\"])(Stats);\n"]},"metadata":{},"sourceType":"module"}